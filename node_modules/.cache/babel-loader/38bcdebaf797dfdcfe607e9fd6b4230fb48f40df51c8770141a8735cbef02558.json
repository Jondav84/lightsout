{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sutto\\\\SpringBoard\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\n/** @format */\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport Winner from \"./Winner\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction createSolvableBoard(nrows, ncols, chanceLightStartsOn) {\n  function countInversions(arr) {\n    return arr.reduce((inversions, value, i, arr) => inversions + arr.slice.filter(x => x < value).length, 0);\n  }\n  const board = Array.from({\n    length: nrows\n  }, () => Array.from({\n    length: ncols\n  }, () => Math.random() < chanceLightStartsOn));\n  const inversions = countInversions(board.flat());\n  if (inversions % 2 === 1) {\n    let [y1, x1] = [Math.floor(Math.random() * nrows), Math.floor(Math.random() * ncols)];\n    let [y2, x2] = [Math.floor(Math.random() * nrows), Math.floor(Math.random() * ncols)];\n    while (y1 === y2 && x1 === x2) {\n      y2 = Math.floor(Math.random() * nrows);\n      x2 = Math.floor(Math.random() * ncols);\n    }\n    [board[y1][x1], board[y2][x2]] = [board[y2][x2], board[y1][x1]];\n  }\n  return board;\n}\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.2\n}) {\n  _s();\n  const [board, setBoard] = useState(createSolvableBoard(nrows, ncols, chanceLightStartsOn));\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y + 1, x, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(Winner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 12\n    }, this);\n  }\n\n  // make table board\n  // TODO\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAroundMe: flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"O5DL5GgG3FhxulWB15Ic5ekfE40=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Winner","jsxDEV","_jsxDEV","createSolvableBoard","nrows","ncols","chanceLightStartsOn","countInversions","arr","reduce","inversions","value","i","slice","filter","x","length","board","Array","from","Math","random","flat","y1","x1","floor","y2","x2","Board","_s","setBoard","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","split","map","Number","flipCell","boardCopy","newBoard","fileName","_jsxFileName","lineNumber","columnNumber","className","children","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["C:/Users/sutto/SpringBoard/react-lights-out/src/Board.js"],"sourcesContent":["/** @format */\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport Winner from \"./Winner\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\nfunction createSolvableBoard(nrows, ncols, chanceLightStartsOn) {\n  function countInversions(arr) {\n    return arr.reduce(\n      (inversions, value, i, arr) =>\n        inversions + arr.slice.filter((x) => x < value).length,\n      0\n    );\n  }\n\n  const board = Array.from({ length: nrows }, () =>\n    Array.from({ length: ncols }, () => Math.random() < chanceLightStartsOn)\n  );\n\n  const inversions = countInversions(board.flat());\n\n  if (inversions % 2 === 1) {\n    let [y1, x1] = [\n      Math.floor(Math.random() * nrows),\n      Math.floor(Math.random() * ncols),\n    ];\n    let [y2, x2] = [\n      Math.floor(Math.random() * nrows),\n      Math.floor(Math.random() * ncols),\n    ];\n    while (y1 === y2 && x1 === x2) {\n      y2 = Math.floor(Math.random() * nrows);\n      x2 = Math.floor(Math.random() * ncols);\n    }\n    [board[y1][x1], board[y2][x2]] = [board[y2][x2], board[y1][x1]];\n  }\n  return board;\n}\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.2 }) {\n  const [board, setBoard] = useState(\n    createSolvableBoard(nrows, ncols, chanceLightStartsOn)\n  );\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every((row) => row.every((cell) => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map((row) => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y + 1, x, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  if (hasWon()) {\n    return <Winner />;\n  }\n\n  // make table board\n  // TODO\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, y) => (\n          <tr key={y}>\n            {row.map((cell, x) => (\n              <Cell\n                key={`${y}-${x}`}\n                isLit={cell}\n                flipCellsAroundMe={flipCellsAround(`${y}-${x}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;AACpB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,KAAK,EAAEC,mBAAmB,EAAE;EAC9D,SAASC,eAAeA,CAACC,GAAG,EAAE;IAC5B,OAAOA,GAAG,CAACC,MAAM,CACf,CAACC,UAAU,EAAEC,KAAK,EAAEC,CAAC,EAAEJ,GAAG,KACxBE,UAAU,GAAGF,GAAG,CAACK,KAAK,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,GAAGJ,KAAK,CAAC,CAACK,MAAM,EACxD,CACF,CAAC;EACH;EAEA,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAEZ;EAAM,CAAC,EAAE,MAC1Cc,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAEX;EAAM,CAAC,EAAE,MAAMe,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGf,mBAAmB,CACzE,CAAC;EAED,MAAMI,UAAU,GAAGH,eAAe,CAACU,KAAK,CAACK,IAAI,CAAC,CAAC,CAAC;EAEhD,IAAIZ,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE;IACxB,IAAI,CAACa,EAAE,EAAEC,EAAE,CAAC,GAAG,CACbJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGjB,KAAK,CAAC,EACjCgB,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGhB,KAAK,CAAC,CAClC;IACD,IAAI,CAACqB,EAAE,EAAEC,EAAE,CAAC,GAAG,CACbP,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGjB,KAAK,CAAC,EACjCgB,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGhB,KAAK,CAAC,CAClC;IACD,OAAOkB,EAAE,KAAKG,EAAE,IAAIF,EAAE,KAAKG,EAAE,EAAE;MAC7BD,EAAE,GAAGN,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGjB,KAAK,CAAC;MACtCuB,EAAE,GAAGP,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGhB,KAAK,CAAC;IACxC;IACA,CAACY,KAAK,CAACM,EAAE,CAAC,CAACC,EAAE,CAAC,EAAEP,KAAK,CAACS,EAAE,CAAC,CAACC,EAAE,CAAC,CAAC,GAAG,CAACV,KAAK,CAACS,EAAE,CAAC,CAACC,EAAE,CAAC,EAAEV,KAAK,CAACM,EAAE,CAAC,CAACC,EAAE,CAAC,CAAC;EACjE;EACA,OAAOP,KAAK;AACd;AAEA,SAASW,KAAKA,CAAC;EAAExB,KAAK,GAAG,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC,mBAAmB,GAAG;AAAI,CAAC,EAAE;EAAAuB,EAAA;EAClE,MAAM,CAACZ,KAAK,EAAEa,QAAQ,CAAC,GAAGhC,QAAQ,CAChCK,mBAAmB,CAACC,KAAK,EAAEC,KAAK,EAAEC,mBAAmB,CACvD,CAAC;EAED,SAASyB,MAAMA,CAAA,EAAG;IAChB;IACA,OAAOd,KAAK,CAACe,KAAK,CAAEC,GAAG,IAAKA,GAAG,CAACD,KAAK,CAAEE,IAAI,IAAK,CAACA,IAAI,CAAC,CAAC;EACzD;EAEA,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9BN,QAAQ,CAAEO,QAAQ,IAAK;MACrB,MAAM,CAACC,CAAC,EAAEvB,CAAC,CAAC,GAAGqB,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAC3C,MAAMC,QAAQ,GAAGA,CAACJ,CAAC,EAAEvB,CAAC,EAAE4B,SAAS,KAAK;QACpC;QACA,IAAI5B,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGV,KAAK,IAAIiC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGlC,KAAK,EAAE;UAC9CuC,SAAS,CAACL,CAAC,CAAC,CAACvB,CAAC,CAAC,GAAG,CAAC4B,SAAS,CAACL,CAAC,CAAC,CAACvB,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;MACA,MAAM6B,QAAQ,GAAGP,QAAQ,CAACG,GAAG,CAAEP,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;;MAEhD;MACAS,QAAQ,CAACJ,CAAC,EAAEvB,CAAC,EAAE6B,QAAQ,CAAC;MACxBF,QAAQ,CAACJ,CAAC,EAAEvB,CAAC,GAAG,CAAC,EAAE6B,QAAQ,CAAC;MAC5BF,QAAQ,CAACJ,CAAC,GAAG,CAAC,EAAEvB,CAAC,EAAE6B,QAAQ,CAAC;MAC5BF,QAAQ,CAACJ,CAAC,EAAEvB,CAAC,GAAG,CAAC,EAAE6B,QAAQ,CAAC;MAC5BF,QAAQ,CAACJ,CAAC,GAAG,CAAC,EAAEvB,CAAC,EAAE6B,QAAQ,CAAC;;MAE5B;MACA,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ;;EAEA;EACA;EACA,IAAIb,MAAM,CAAC,CAAC,EAAE;IACZ,oBAAO7B,OAAA,CAACF,MAAM;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB;;EAEA;EACA;EACA,oBACE9C,OAAA;IAAO+C,SAAS,EAAC,OAAO;IAAAC,QAAA,eACtBhD,OAAA;MAAAgD,QAAA,EACGjC,KAAK,CAACuB,GAAG,CAAC,CAACP,GAAG,EAAEK,CAAC,kBAChBpC,OAAA;QAAAgD,QAAA,EACGjB,GAAG,CAACO,GAAG,CAAC,CAACN,IAAI,EAAEnB,CAAC,kBACfb,OAAA,CAACH,IAAI;UAEHoD,KAAK,EAAEjB,IAAK;UACZkB,iBAAiB,EAAEjB,eAAe,CAAE,GAAEG,CAAE,IAAGvB,CAAE,EAAC;QAAE,GAF1C,GAAEuB,CAAE,IAAGvB,CAAE,EAAC;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGjB,CACF;MAAC,GAPKV,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQN,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ;AAACnB,EAAA,CA5DQD,KAAK;AAAAyB,EAAA,GAALzB,KAAK;AA8Dd,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}